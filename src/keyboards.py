from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                          InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import src.database.requests as db
import logging
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
        KeyboardButton(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    ],
    [
        KeyboardButton(text='–ö–∞—Ç–∞–ª–æ–≥'),
        KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞')
    ],
    
    [KeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
cart_keyboard = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'),
        KeyboardButton(text='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
    ],
    [KeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
main_command = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='–ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog'),
        InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞', callback_data='cart')
    ],
    [
        InlineKeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contacts'),
        InlineKeyboardButton(text='–õ–æ–∫–∞—Ü–∏—è', callback_data='location')
    ],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –æ–Ω–∞ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å)
async def catalog_builder():
    catalog_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 1', callback_data='catalog_1'),
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 2', callback_data='catalog_2')
        ],
        [
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 3', callback_data='catalog_3'),
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 4', callback_data='catalog_4')
        ],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
    ])

    return catalog_kb


send_contact = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)],
    [KeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')]
], resize_keyboard=True)

send_location = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)],
    [KeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
menu_commands = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='/start'),
        KeyboardButton(text='/menu'),
        KeyboardButton(text='/help')
    ],
    [
        KeyboardButton(text='/profile'),
        KeyboardButton(text='/settings'),
        KeyboardButton(text='/register')
    ],
    [KeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
cancel_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
profile_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data='edit_name'),
        InlineKeyboardButton(text='‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email', callback_data='edit_email')
    ],
    [
        InlineKeyboardButton(text='üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data='edit_phone'),
        InlineKeyboardButton(text='üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', callback_data='edit_age')
    ],
    [
        InlineKeyboardButton(text='üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='edit_photo'),
        InlineKeyboardButton(text='üìç –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='edit_location')
    ],
    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def categories():
    try:
        all_categories = await db.get_categories()
        categories_list = [cat for cat in all_categories]
        
        keyboard = InlineKeyboardBuilder()
        
        if not categories_list:
            keyboard.add(InlineKeyboardButton(
                text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back"
            ))
        else:
            for category in categories_list:
                keyboard.add(InlineKeyboardButton(
                    text=category.name,
                    callback_data=f'category_{category.id}'
                ))
            keyboard.add(InlineKeyboardButton(
                text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back"
            ))
        
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
async def category_products(category_id: int):
    try:
        all_products = await db.get_products_by_category(category_id)
        products_list = [prod for prod in all_products]
        
        keyboard = InlineKeyboardBuilder()
        
        if not products_list:
            keyboard.add(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_categories"
            ))
        else:
            for product in products_list:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f'product_{product.product_id}'
                ))
            keyboard.add(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_categories"
            ))
        
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return None
