from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                          InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import src.database.requests as db
from src.database.models import OrderStatus, PaymentMethod, Order
import logging
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–∏—Å–∫–æ–º –∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
main = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥'),
        KeyboardButton(text='üõí –ö–æ—Ä–∑–∏–Ω–∞')
    ],
    [
        KeyboardButton(text='üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'),
        KeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å')
    ],
    [
        KeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
        KeyboardButton(text='üîç –ü–æ–∏—Å–∫')
    ]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
cart_keyboard = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'),
        KeyboardButton(text='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
    ],
    [KeyboardButton(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
main_command = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog'),
        InlineKeyboardButton(text='üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data='cart')
    ],
    [
        InlineKeyboardButton(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contacts'),
        InlineKeyboardButton(text='üìç –õ–æ–∫–∞—Ü–∏—è', callback_data='location')
    ],
    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –æ–Ω–∞ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å)
async def catalog_builder():
    catalog_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 1', callback_data='catalog_1'),
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 2', callback_data='catalog_2')
        ],
        [
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 3', callback_data='catalog_3'),
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 4', callback_data='catalog_4')
        ],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
    ])

    return catalog_kb


send_contact = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)],
    [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')]
], resize_keyboard=True)

send_location = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)],
    [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
cancel_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")]
], resize_keyboard=True)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
profile_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data='edit_name'),
        InlineKeyboardButton(text='‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email', callback_data='edit_email')
    ],
    [
        InlineKeyboardButton(text='üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data='edit_phone'),
        InlineKeyboardButton(text='üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', callback_data='edit_age')
    ],
    [
        InlineKeyboardButton(text='üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='edit_photo'),
        InlineKeyboardButton(text='üìç –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='edit_location')
    ],
    [
        InlineKeyboardButton(text='üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data='show_cart'),
        InlineKeyboardButton(text='‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data='show_favorites')
    ],
    [
        InlineKeyboardButton(text='üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='show_orders')
    ]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def categories() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        all_categories = await db.get_categories()
        keyboard = InlineKeyboardBuilder()
        
        for category in all_categories:
            keyboard.add(InlineKeyboardButton(
                text=category.name,
                callback_data=f'category_{category.id}'
            ))
            
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back"
        ))
        
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
async def category_products(category_id: int):
    try:
        all_products = await db.get_products_by_category(category_id)
        products_list = [prod for prod in all_products]
        
        keyboard = InlineKeyboardBuilder()
        
        if not products_list:
            keyboard.add(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_categories"
            ))
        else:
            for product in products_list:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f'product_{product.product_id}'
                ))
            keyboard.add(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_categories"
            ))
        
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="ok-sure"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel-sure")
    ]
])

admin_main = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'),
        KeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    ],
    [
        KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'),
        KeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
    ],
    [KeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä')],
    [
        KeyboardButton(text='üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞'),
        KeyboardButton(text='üö´ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
    ],
    [KeyboardButton(text='üö™ –í—ã–π—Ç–∏')]
], resize_keyboard=True)

async def delete_categories():
    all_categories = await db.get_categories()
    keyboard = InlineKeyboardBuilder()
    for category in all_categories:
        keyboard.add(InlineKeyboardButton(text=category.name, callback_data=f'delete_{category.id}'))
    return keyboard.adjust(2).as_markup()

async def admin_categories():
    all_categories = await db.get_categories()
    keyboard = InlineKeyboardBuilder()
    for category in all_categories:
        keyboard.add(InlineKeyboardButton(text=category.name, callback_data=f'addcategory_{category.id}'))
    return keyboard.adjust(2).as_markup()

async def delete_product():
    try:
        all_products = await db.get_all_products()
        keyboard = InlineKeyboardBuilder()
        
        if not all_products:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in all_products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"proddelete_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_delete"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

async def add_admins():
    all_admins = await db.get_admins()
    keyboard = InlineKeyboardBuilder()
    for admin in all_admins:
        keyboard.add(InlineKeyboardButton(
            text=f"{admin.first_name or f'ID: {admin.user_id}'}", 
            callback_data=f'addadmin_{admin.user_id}'
        ))
    return keyboard.adjust(2).as_markup()
    
async def delete_admins():
    try:
        all_admins = await db.get_admins()
        keyboard = InlineKeyboardBuilder()
        
        if not all_admins:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                callback_data="no_admins"
            ))
        else:
            for admin in all_admins:
                keyboard.add(InlineKeyboardButton(
                    text=f"{admin.first_name or f'ID: {admin.user_id}'}", 
                    callback_data=f'deleteadmin_{admin.user_id}'
                ))
            
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_delete"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return None

async def edit_product_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        all_products = await db.get_all_products()
        keyboard = InlineKeyboardBuilder()
        
        if not all_products:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in all_products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"edit_product_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_edit"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

edit_product_fields = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name"),
        InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
    ],
    [
        InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price"),
        InlineKeyboardButton(text="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_field_quantity")
    ],
    [
        InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="edit_field_photo"),
        InlineKeyboardButton(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field_category")
    ],
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
])

def product_actions(product_id: int, current_quantity: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–æ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{product_id}"),
            InlineKeyboardButton(text=f"{current_quantity} —à—Ç.", callback_data=f"quantity_{product_id}"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{product_id}")
        ],
        [
            InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
        ]
    ])

async def edit_product_by_category_kb(category_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        products = await db.get_products_by_category(category_id)
        keyboard = InlineKeyboardBuilder()
        
        if not products:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"edit_product_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

async def delete_products():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        all_products = await db.get_all_products()
        keyboard = InlineKeyboardBuilder()
        
        if not all_products:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in all_products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"deleteproduct_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_delete"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

async def products_by_category(category_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        products = await db.get_products_by_category(category_id)
        keyboard = InlineKeyboardBuilder()
        
        if not products:
            keyboard.add(InlineKeyboardButton(
                text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"product_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

edit_product = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name"),
        InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
    ],
    [
        InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price"),
        InlineKeyboardButton(text="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_field_quantity")
    ],
    [
        InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="edit_field_photo"),
        InlineKeyboardButton(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field_category")
    ],
    [
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_admin_categories"),
        InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="back_to_admin_menu")
    ]
])

async def admin_products_by_category(category_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        products = await db.get_products_by_category(category_id)
        keyboard = InlineKeyboardBuilder()
        
        if not products:
            keyboard.add(InlineKeyboardButton(
                text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in products:
                keyboard.add(InlineKeyboardButton(
                    text=f"‚úèÔ∏è {product.name}",
                    callback_data=f"edit_product_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
skip_location = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)],
    [KeyboardButton(text='‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')],
    [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')]
], resize_keyboard=True)

async def admin_categories_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–¥–º–∏–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        all_categories = await db.get_categories()
        keyboard = InlineKeyboardBuilder()
        
        for category in all_categories:
            keyboard.add(InlineKeyboardButton(
                text=category.name,
                callback_data=f'admin_category_{category.id}'
            ))
            
        keyboard.row(InlineKeyboardButton(
            text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é",
            callback_data="back_to_admin_menu"
        ))
        
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return None

async def admin_products_by_category_kb(category_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–¥–º–∏–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        products = await db.get_products_by_category(category_id)
        keyboard = InlineKeyboardBuilder()
        
        if products:
            for product in products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f'admin_product_{product.product_id}'
                ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_admin_categories"
            ),
            InlineKeyboardButton(
                text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é",
                callback_data="back_to_admin_menu"
            )
        )
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return None

cancel_button = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[cancel_button]], 
    resize_keyboard=True
)

skip_photo_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ],
    resize_keyboard=True
)

def cart_item_keyboard(product_id: int, current_quantity: int = 1):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"cart_decrease_{product_id}"),
            InlineKeyboardButton(text=f"{current_quantity} —à—Ç.", callback_data=f"cart_qty_{product_id}"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"cart_increase_{product_id}")
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_from_cart_{product_id}")
        ]
    ])

def cart_summary_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Ç–æ–≥–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        ],
        [
            InlineKeyboardButton(text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="continue_shopping")
        ]
    ])

def delivery_method_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üöö –ö—É—Ä—å–µ—Ä–æ–º", callback_data="delivery_courier"),
            InlineKeyboardButton(text="üè™ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_pickup")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_checkout")]
    ])

def payment_method_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíµ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="payment_card"),
            InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data="payment_stars")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_checkout")]
    ])

def payment_confirm_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã P2P"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")
        ]
    ])

def order_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
        ]
    ])

def order_status_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", callback_data=f"order_details_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order_id}")
        ],
        [
            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]
    ])

main_inline = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog"),
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")
    ],
    [
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"),
        InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="show_orders")
    ],
    [
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
def product_keyboard(product_id: int, is_favorite: bool = False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"qty_minus_{product_id}"),
            InlineKeyboardButton(text="0", callback_data="current_qty"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"qty_plus_{product_id}")
        ],
        [
            InlineKeyboardButton(
                text="‚ù§Ô∏è" if is_favorite else "ü§ç",
                callback_data=f"toggle_favorite_{product_id}"
            ),
            InlineKeyboardButton(
                text="üõí –í –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"cart_add_{product_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìù –û—Ç–∑—ã–≤—ã",
                callback_data=f"show_reviews_{product_id}"
            ),
            InlineKeyboardButton(
                text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤",
                callback_data=f"review_{product_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_categories"
            )
        ]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞
review_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚≠ê", callback_data="rate_1"),
        InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data="rate_2"),
        InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data="rate_3"),
        InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4"),
        InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5")
    ],
    [
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")
    ]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")]],
    resize_keyboard=True
)

def get_order_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    status_emojis = {
        "pending": "‚è≥",
        "completed": "‚úÖ",
        "cancelled": "‚ùå",
        "processing": "üîÑ"
    }
    return status_emojis.get(status, "‚ùì")

def format_order_info(order: Order) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    status_emoji = get_order_status_emoji(order.status)
    return (
        f"üÜî –ó–∞–∫–∞–∑ #{order.order_id}\n"
        f"üí∞ –°—É–º–º–∞: {order.total_amount}‚ÇΩ\n"
        f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_emoji} {order.status}"
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
notifications_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üîî –í–∫–ª", callback_data="notif_on"),
        InlineKeyboardButton(text="üîï –í—ã–∫–ª", callback_data="notif_off")
    ],
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
])

language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")
    ],
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings")]
])

settings_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications"),
        InlineKeyboardButton(text="üåç –Ø–∑—ã–∫", callback_data="settings_language")
    ],
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])
