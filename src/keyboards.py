from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                          InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import src.database.requests as db
import logging
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
        KeyboardButton(text='üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    ],
    [
        KeyboardButton(text='üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥'),
        KeyboardButton(text='üõí –ö–æ—Ä–∑–∏–Ω–∞')
    ],
    [KeyboardButton(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
cart_keyboard = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'),
        KeyboardButton(text='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
    ],
    [KeyboardButton(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
main_command = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog'),
        InlineKeyboardButton(text='üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data='cart')
    ],
    [
        InlineKeyboardButton(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contacts'),
        InlineKeyboardButton(text='üìç –õ–æ–∫–∞—Ü–∏—è', callback_data='location')
    ],
    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –æ–Ω–∞ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å)
async def catalog_builder():
    catalog_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 1', callback_data='catalog_1'),
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 2', callback_data='catalog_2')
        ],
        [
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 3', callback_data='catalog_3'),
            InlineKeyboardButton(text='–¢–æ–≤–∞—Ä 4', callback_data='catalog_4')
        ],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
    ])

    return catalog_kb


send_contact = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)],
    [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')]
], resize_keyboard=True)

send_location = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)],
    [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
menu_commands = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='üöÄ /start'),
        KeyboardButton(text='üìã /menu'),
        KeyboardButton(text='‚ùì /help')
    ],
    [
        KeyboardButton(text='üë§ /profile'),
        KeyboardButton(text='‚öôÔ∏è /settings'),
        KeyboardButton(text='üìù /register')
    ],
    [KeyboardButton(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
cancel_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
profile_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data='edit_name'),
        InlineKeyboardButton(text='‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email', callback_data='edit_email')
    ],
    [
        InlineKeyboardButton(text='üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data='edit_phone'),
        InlineKeyboardButton(text='üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', callback_data='edit_age')
    ],
    [
        InlineKeyboardButton(text='üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='edit_photo'),
        InlineKeyboardButton(text='üìç –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data='edit_location')
    ],
    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def categories():
    try:
        all_categories = await db.get_categories()
        categories_list = [cat for cat in all_categories]
        
        keyboard = InlineKeyboardBuilder()
        
        if not categories_list:
            keyboard.add(InlineKeyboardButton(
                text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back"
            ))
        else:
            for category in categories_list:
                keyboard.add(InlineKeyboardButton(
                    text=category.name,
                    callback_data=f'category_{category.id}'
                ))
            keyboard.add(InlineKeyboardButton(
                text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back"
            ))
        
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
async def category_products(category_id: int):
    try:
        all_products = await db.get_products_by_category(category_id)
        products_list = [prod for prod in all_products]
        
        keyboard = InlineKeyboardBuilder()
        
        if not products_list:
            keyboard.add(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_categories"
            ))
        else:
            for product in products_list:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f'product_{product.product_id}'
                ))
            keyboard.add(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_categories"
            ))
        
        return keyboard.adjust(2).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return None

confirm = InlineKeyboardMarkup (inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='ok-sure')], 
    [InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='cancel-sure')]],
    resize_keyboard=True)

admin_main = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'),
        KeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    ],
    [
        KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'),
        KeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
    ],
    [KeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä')],
    [
        KeyboardButton(text='üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞'),
        KeyboardButton(text='üö´ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
    ],
    [KeyboardButton(text='üö™ –í—ã–π—Ç–∏')]
], resize_keyboard=True)

async def delete_categories():
    all_categories = await db.get_categories()
    keyboard = InlineKeyboardBuilder()
    for category in all_categories:
        keyboard.add(InlineKeyboardButton(text=category.name, callback_data=f'delete_{category.id}'))
    return keyboard.adjust(2).as_markup()

async def admin_categories():
    all_categories = await db.get_categories()
    keyboard = InlineKeyboardBuilder()
    for category in all_categories:
        keyboard.add(InlineKeyboardButton(text=category.name, callback_data=f'addcategory_{category.id}'))
    return keyboard.adjust(2).as_markup()

async def delete_product():
    try:
        all_products = await db.get_all_products()
        keyboard = InlineKeyboardBuilder()
        
        if not all_products:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in all_products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"proddelete_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_delete"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

async def add_admins():
    all_admins = await db.get_admins()
    keyboard = InlineKeyboardBuilder()
    for admin in all_admins:
        keyboard.add(InlineKeyboardButton(
            text=f"{admin.first_name or f'ID: {admin.user_id}'}", 
            callback_data=f'addadmin_{admin.user_id}'
        ))
    return keyboard.adjust(2).as_markup()
    
async def delete_admins():
    try:
        all_admins = await db.get_admins()
        keyboard = InlineKeyboardBuilder()
        
        if not all_admins:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                callback_data="no_admins"
            ))
        else:
            for admin in all_admins:
                keyboard.add(InlineKeyboardButton(
                    text=f"{admin.first_name or f'ID: {admin.user_id}'}", 
                    callback_data=f'deleteadmin_{admin.user_id}'
                ))
            
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_delete"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return None

async def edit_product_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        all_products = await db.get_all_products()
        keyboard = InlineKeyboardBuilder()
        
        if not all_products:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in all_products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"edit_product_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_edit"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

edit_product_fields = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name"),
        InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
    ],
    [
        InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_field_price"),
        InlineKeyboardButton(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field_category")
    ],
    [InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="edit_field_photo")],
    [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
])

def product_actions(product_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–æ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üõí –í –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_to_cart_{product_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_categories"
            )
        ]
    ])

async def edit_product_by_category_kb(category_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        products = await db.get_products_by_category(category_id)
        keyboard = InlineKeyboardBuilder()
        
        if not products:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"edit_product_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

async def delete_products():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        all_products = await db.get_all_products()
        keyboard = InlineKeyboardBuilder()
        
        if not all_products:
            keyboard.add(InlineKeyboardButton(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in all_products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"deleteproduct_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_delete"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

async def products_by_category(category_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        products = await db.get_products_by_category(category_id)
        keyboard = InlineKeyboardBuilder()
        
        if not products:
            keyboard.add(InlineKeyboardButton(
                text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in products:
                keyboard.add(InlineKeyboardButton(
                    text=f"{product.name} - {product.price}‚ÇΩ",
                    callback_data=f"product_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

edit_product = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name"),
        InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")
    ],
    [
        InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data="edit_price"),
        InlineKeyboardButton(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_category")
    ],
    [InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="edit_photo")],
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

async def admin_products_by_category(category_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        products = await db.get_products_by_category(category_id)
        keyboard = InlineKeyboardBuilder()
        
        if not products:
            keyboard.add(InlineKeyboardButton(
                text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                callback_data="no_products"
            ))
        else:
            for product in products:
                keyboard.add(InlineKeyboardButton(
                    text=f"‚úèÔ∏è {product.name}",
                    callback_data=f"edit_product_{product.product_id}"
                ))
                
        keyboard.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        ))
        
        return keyboard.adjust(1).as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
skip_location = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)],
    [KeyboardButton(text='‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')],
    [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')]
], resize_keyboard=True)
