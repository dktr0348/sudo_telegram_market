from aiogram import F
from aiogram import Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart, BaseFilter
from src.config import admin_ids, super_admin_id, Config
from src.database.database import Database
import src.state as st
import src.keyboards as kb
import src.database.requests as db
from aiogram.fsm.context import FSMContext
import logging
from ..database.models import StarsTransaction  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏

router = Router()

async def check_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if message.from_user.id not in Config.admin_ids:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return False
    return True

class SuperAdminFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def __call__(self, message: Message | CallbackQuery) -> bool:
        if isinstance(message, Message):
            user_id = message.from_user.id
        else:
            user_id = message.from_user.id
        return user_id == super_admin_id

super_admin_filter = SuperAdminFilter()

@router.message(Command('superadmin'))
async def super_admin_cmd(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    if message.from_user.id == super_admin_id:
        await message.answer("üëë –í—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=kb.admin_main)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

@router.message(F.text == 'üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞')
async def add_admin_cmd(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != super_admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
        
    await state.set_state(st.AddAdmin.name)
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:",
        reply_markup=kb.cancel_kb
    )

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", st.AddAdmin.name)
async def cancel_add_admin(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.admin_main
    )

@router.message(st.AddAdmin.name)
async def add_admin_confirm(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != super_admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        await state.clear()
        return
        
    try:
        admin_id = int(message.text)
        await state.update_data(admin_id=admin_id)
        await state.set_state(st.AddAdmin.confirm)
        await message.answer(
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_id} –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã?",
            reply_markup=kb.confirm
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)",
            reply_markup=kb.admin_main
        )

@router.callback_query(F.data == 'ok-sure', st.AddAdmin.confirm)
async def add_admin_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user.id != super_admin_id:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        await state.clear()
        return
        
    data = await state.get_data()
    admin_id = data['admin_id']
    
    if await db.add_admin(admin_id):
        await callback.message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
            reply_markup=kb.admin_main
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=kb.admin_main
        )
    await state.clear()

@router.message(F.text == 'üö´ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
async def delete_admin_cmd(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != super_admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
        
    await state.set_state(st.DeleteAdmin.select)
    keyboard = await kb.delete_admins()
    await message.answer(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("deleteadmin_"))
async def process_admin_deletion(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user.id != super_admin_id:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        await state.clear()
        return
        
    admin_id = int(callback.data.split("_")[1])
    
    if await db.delete_admin(admin_id):
        await callback.message.answer(
            "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=kb.admin_main
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=kb.admin_main
        )
    await state.clear()

class AdminFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        return user_id == super_admin_id or await db.is_admin(user_id)

admin_filter = AdminFilter()

@router.message(Command('admin'))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    is_super_admin = user_id == super_admin_id
    is_admin = await db.is_admin(user_id)
    
    if is_admin or is_super_admin:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=kb.admin_main
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(admin_filter, F.text == 'üö™ –í—ã–π—Ç–∏')
async def exit_admin(message: Message):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await message.answer(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=kb.main
    )

@router.message(admin_filter, F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def add_category(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(st.AddCategory.name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@router.message(admin_filter, st.AddCategory.name)
async def add_category_sure(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.update_data(name=message.text)
    await state.set_state(st.AddCategory.confirm)
    await message.answer(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{message.text}'?",
        reply_markup=kb.confirm
    )

@router.callback_query(admin_filter, F.data == 'ok-sure', st.AddCategory.confirm)
async def add_category_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    await db.add_category(data['name'])
    await callback.message.answer(
        "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞",
        reply_markup=kb.admin_main
    )
    await state.clear()

@router.callback_query(admin_filter, F.data == 'cancel-sure', st.AddCategory.confirm)
async def add_category_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.admin_main
    )
    await state.clear()

@router.message(admin_filter, F.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def delete_category_select(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(st.DeleteCategory.select)
    keyboard = await kb.delete_categories()
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@router.callback_query(admin_filter, F.data.startswith("delete_"))
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await state.set_state(st.DeleteCategory.confirm)
    await state.update_data(category_id=category_id)
    await callback.message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?",
        reply_markup=kb.confirm
    )

@router.callback_query(admin_filter, F.data == 'ok-sure', st.DeleteCategory.confirm)
async def delete_category_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await db.delete_category(data['category_id'])
    await callback.message.answer(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞",
        reply_markup=kb.admin_main
    )
    await state.clear()

@router.message(admin_filter, F.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä')
async def edit_product_cmd(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.set_state(st.EditProduct.select_category)
    keyboard = await kb.admin_categories_kb()
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboard
    )

@router.callback_query(admin_filter, F.data.startswith("admin_category_"), st.EditProduct.select_category)
async def edit_product_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split('_')[2])
    await state.update_data(category_id=category_id)
    
    keyboard = await kb.admin_products_by_category(category_id)
    if keyboard:
        await callback.message.edit_text(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        await state.set_state(st.EditProduct.select_product)
    else:
        await callback.message.edit_text(
            "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=await kb.admin_categories_kb()
        )
        await state.clear()

@router.callback_query(admin_filter, F.data.startswith("edit_product_"), st.EditProduct.select_product)
async def edit_product_select_field(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    product_id = int(callback.data.split('_')[2])
    await state.update_data(product_id=product_id)
    
    product = await db.get_product_by_id(product_id)
    if product:
        text = (
            f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price}‚ÇΩ\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
        )
        
        if product.photo_id:
            await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer_photo(
                photo=product.photo_id,
                caption=text + "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                reply_markup=kb.edit_product
            )
        else:
            await callback.message.edit_text(
                text + "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                reply_markup=kb.edit_product
            )
        await state.set_state(st.EditProduct.select_field)
    else:
        await callback.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=kb.admin_main
        )
        await state.clear()

async def show_edit_menu(message: Message, state: FSMContext, success_message: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    data = await state.get_data()
    product = await db.get_product_by_id(data['product_id'])
    
    if product:
        text = (
            f"{success_message}\n\n" if success_message else ""
            f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price}‚ÇΩ\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
        )
        
        if product.photo_id:
            await message.answer_photo(
                photo=product.photo_id,
                caption=text,
                reply_markup=kb.edit_product
            )
        else:
            await message.answer(
                text,
            reply_markup=kb.edit_product
        )
        await state.set_state(st.EditProduct.select_field)
    else:
        await message.answer(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=kb.admin_main
        )
        await state.clear()

@router.message(admin_filter, st.EditProduct.edit_name)
async def save_product_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    if await db.edit_product(data['product_id'], name=message.text):
        await show_edit_menu(message, state, "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")

@router.message(admin_filter, st.EditProduct.edit_description)
async def save_product_description(message: Message, state: FSMContext):
    data = await state.get_data()
    if await db.edit_product(data['product_id'], description=message.text):
        await show_edit_menu(message, state, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")

@router.message(admin_filter, st.EditProduct.edit_price)
async def save_product_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        data = await state.get_data()
        if await db.edit_product(data['product_id'], price=price):
            await show_edit_menu(message, state, "‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")

@router.message(admin_filter, st.EditProduct.edit_quantity)
async def save_product_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        data = await state.get_data()
        if await db.edit_product(data['product_id'], quantity=quantity):
            await show_edit_menu(message, state, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    await state.clear()

@router.callback_query(admin_filter, F.data == "edit_field_photo", st.EditProduct.select_field)
async def edit_product_photo(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.answer(
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.cancel_keyboard
    )
    await state.set_state(st.EditProduct.edit_photo)

@router.message(admin_filter, st.EditProduct.edit_photo, F.photo)
async def save_product_photo(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        if await db.edit_product(data['product_id'], photo_id=photo_id):
            await show_edit_menu(message, state, "‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ",
                reply_markup=kb.edit_product
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ",
            reply_markup=kb.edit_product
        )

@router.message(F.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def delete_product_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.set_state(st.DeleteProduct.select_category)
    keyboard = await kb.admin_categories_kb()
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@router.callback_query(admin_filter, F.data.startswith("admin_category_"), st.DeleteProduct.select_category)
async def delete_product_select_category(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    category_id = int(callback.data.split('_')[2])
    await state.update_data(category_id=category_id)
    
    keyboard = await kb.admin_products_by_category_kb(category_id)
    if keyboard:
        await callback.message.edit_text(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        await state.set_state(st.DeleteProduct.select_product)
    else:
        await callback.message.edit_text(
            "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=await kb.admin_categories_kb()
        )
        await state.clear()

@router.callback_query(admin_filter, F.data.startswith("admin_product_"), st.DeleteProduct.select_product)
async def delete_product_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split('_')[2])
    await state.update_data(product_id=product_id)
    
    product = await db.get_product_by_id(product_id)
    if product:
        text = (
            f"‚ùóÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?\n\n"
            f"üì¶ {product.name}\n"
            f"üí∞ {product.price}‚ÇΩ\n"
            f"üìù {product.description}"
        )
        
        if product.photo_id:
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=product.photo_id,
                caption=text,
                reply_markup=kb.confirm
            )
        else:
            await callback.message.edit_text(
                text,
                reply_markup=kb.confirm
            )
        await state.set_state(st.DeleteProduct.confirm)
    else:
        await callback.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=kb.admin_main
        )
        await state.clear()

@router.callback_query(admin_filter, F.data == "ok-sure", st.DeleteProduct.confirm)
async def delete_product_final(callback: CallbackQuery, state: FSMContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    product_id = data.get('product_id')
    
    if await db.delete_product(product_id):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=kb.admin_main
        )
    else:
        await callback.message.delete()
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=kb.admin_main
        )
    await state.clear()

@router.callback_query(admin_filter, F.data == "cancel-sure", st.DeleteProduct.confirm)
async def cancel_delete_product(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.delete()
    await callback.message.answer(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.admin_main
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", show_alert=True)
    await state.clear()

@router.callback_query(F.data == "back_to_admin_categories")
async def back_to_admin_categories(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∞–¥–º–∏–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)"""
    await state.set_state(st.EditProduct.select_category)
    keyboard = await kb.admin_categories_kb()
    
    if callback.message.photo:
        await callback.message.delete()
        await callback.message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )

@router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")]
    ])
    
    if callback.message.photo:
        await callback.message.delete()
        await callback.message.answer(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=admin_kb
        )
    else:
        await callback.message.edit_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=admin_kb
        )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
@router.callback_query(F.data == "admin_menu")
async def show_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    await callback.message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=kb.admin_main
    )
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π
    await callback.message.delete()

@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split('_')[1])
        product = await db.get_product_by_id(product_id)
        
        if not product:
            await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        text = (
            f"üì¶ {product.name}\n"
            f"üìù {product.description}\n"
            f"üí∞ {product.price}‚ÇΩ"
        )
        
        if product.photo_id:
            await callback.message.answer_photo(
                photo=product.photo_id,
                caption=text,
                reply_markup=kb.product_actions(product_id)
            )
        else:
            await callback.message.answer(
                text,
                reply_markup=kb.product_actions(product_id)
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–∞")

@router.callback_query(admin_filter, F.data == "edit_field_quantity", st.EditProduct.select_field)
async def edit_product_quantity(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(st.EditProduct.edit_quantity)

@router.message(admin_filter, st.EditProduct.edit_quantity)
async def save_product_quantity(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        quantity = int(message.text)
        if quantity < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
            
        data = await state.get_data()
        if await db.edit_product(data['product_id'], quantity=quantity):
            await show_edit_menu(message, state, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    await state.clear()

@router.callback_query(admin_filter, F.data == "edit_field_category", st.EditProduct.select_field)
async def edit_product_category(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    product_id = (await state.get_data()).get('product_id')
    if not product_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
        
    await state.update_data(product_id=product_id)
    await state.set_state(st.EditProduct.edit_category)
    
    keyboard = await kb.admin_categories_kb()
    if callback.message.photo:
        await callback.message.delete()
        await callback.message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=keyboard
        )

@router.callback_query(admin_filter, F.data.startswith("admin_category_"), st.EditProduct.edit_category)
async def save_product_category(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    try:
        category_id = int(callback.data.split("_")[2])
        data = await state.get_data()
        product_id = data.get('product_id')
        
        if not product_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=kb.admin_main
            )
            await state.clear()
            return
            
        if await db.edit_product(product_id, category_id=category_id):
            await show_edit_menu(callback.message, state, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                reply_markup=kb.admin_main
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=kb.admin_main
        )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == "back_to_edit_menu")
async def back_to_edit_menu_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    if data.get('product_id'):
        await show_edit_menu(callback.message, state, "")
    else:
        await callback.message.edit_text(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å",
            reply_markup=kb.admin_main
        )
        await state.clear()

@router.callback_query(admin_filter, F.data == "edit_field_name", st.EditProduct.select_field)
async def edit_product_name(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.cancel_keyboard
    )
    await state.set_state(st.EditProduct.edit_name)

@router.callback_query(admin_filter, F.data == "edit_field_description", st.EditProduct.select_field)
async def edit_product_description(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.cancel_keyboard
    )
    await state.set_state(st.EditProduct.edit_description)

@router.callback_query(admin_filter, F.data == "edit_field_price", st.EditProduct.select_field)
async def edit_product_price(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.cancel_keyboard
    )
    await state.set_state(st.EditProduct.edit_price)

@router.callback_query(admin_filter, F.data == "edit_field_photo", st.EditProduct.select_field)
async def edit_product_photo(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.answer(
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.cancel_keyboard
    )
    await state.set_state(st.EditProduct.edit_photo)

@router.message(admin_filter, st.EditProduct.edit_photo, F.photo)
async def save_product_photo(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        if await db.edit_product(data['product_id'], photo_id=photo_id):
            await show_edit_menu(message, state, "‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ",
                reply_markup=kb.edit_product
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ",
            reply_markup=kb.edit_product
        )

@router.callback_query(admin_filter, F.data == "ok-sure", st.AddProduct.confirm)
async def add_product_finish(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    
    try:
        if await db.add_product(
            name=data['name'],
            description=data['description'],
            price=data['price'],
            category_id=data['category_id'],
            photo_id=data.get('photo')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get() —Ç–∫ –∫–∞–∫ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        ):
            await callback.message.answer(
                "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=kb.admin_main
            )
        else:
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
                reply_markup=kb.admin_main
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=kb.admin_main
        )
    finally:
        await state.clear()

@router.callback_query(admin_filter, F.data == "cancel-sure", st.AddProduct.confirm)
async def add_product_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.clear()
    await callback.message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.admin_main
    )

@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def add_product_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.set_state(st.AddProduct.category)
    keyboard = await kb.admin_categories_kb()
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboard
    )

@router.callback_query(admin_filter, F.data.startswith("admin_category_"), st.AddProduct.category)
async def add_product_name(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    category_id = int(callback.data.split('_')[2])
    await state.update_data(category_id=category_id)
    await state.set_state(st.AddProduct.name)
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.cancel_keyboard
    )

@router.message(admin_filter, st.AddProduct.name)
async def add_product_description(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(name=message.text)
    await state.set_state(st.AddProduct.description)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.cancel_keyboard
    )

@router.message(admin_filter, st.AddProduct.description)
async def add_product_price(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(description=message.text)
    await state.set_state(st.AddProduct.price)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.cancel_keyboard
    )

@router.message(admin_filter, st.AddProduct.price)
async def add_product_photo(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(st.AddProduct.photo)
        await message.answer(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ¬ª):",
            reply_markup=kb.skip_photo_kb
            )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")

@router.message(F.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", st.AddProduct.photo)
async def skip_product_photo(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    await state.update_data(photo=None)
    data = await state.get_data()
    await confirm_product_adding(message, state, data)

@router.message(admin_filter, st.AddProduct.photo, F.photo)
async def process_product_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    data = await state.get_data()
    await confirm_product_adding(message, state, data)

async def confirm_product_adding(message: Message, state: FSMContext, data: dict):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    text = (
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
        f"üñº –§–æ—Ç–æ: {'–î–æ–±–∞–≤–ª–µ–Ω–æ' if data.get('photo') else '–ù–µ—Ç'}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="ok-sure"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel-sure")
        ]
    ])
    await message.answer(text, reply_markup=confirm_kb)
    await state.set_state(st.AddProduct.confirm)

# –î–æ–±–∞–≤–∏–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_any_state(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=kb.admin_main
        )

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", st.DeleteAdmin.confirm)
async def cancel_delete_admin(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await state.clear()
    await message.answer(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.admin_main
    )

@router.callback_query(F.data == "back_to_admin_menu", st.EditProduct.select_field)
async def back_to_admin_menu_from_edit(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.clear()
    await callback.message.edit_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=kb.admin_main
    )

@router.callback_query(F.data == "back_to_category_products")
async def back_to_category_products(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    category_id = data.get('category_id')
    
    if category_id:
        keyboard = await kb.admin_products_by_category_kb(category_id)
        if keyboard:
            if callback.message.photo:
                await callback.message.delete()
                await callback.message.answer(
                    "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                    reply_markup=keyboard
                )
            else:
                await callback.message.edit_text(
                    "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                    reply_markup=keyboard
                )
            await state.set_state(st.EditProduct.select_product)
        else:
            await callback.message.edit_text(
                "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                reply_markup=kb.admin_main
            )
            await state.clear()
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=kb.admin_main
        )
        await state.clear()

@router.message(Command("stars_history"))
async def show_stars_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Stars"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É –∏ super_admin
        admins = await db.get_admins()
        if message.from_user.id not in [admin.user_id for admin in admins] and message.from_user.id != super_admin_id:
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = await db.get_stars_transactions(limit=20)
        
        if not transactions:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Stars –ø—É—Å—Ç–∞")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        report = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Stars:\n\n"
        for tx in transactions:
            status_emoji = "‚úÖ" if tx.status == "completed" else "‚ùå"
            report += (
                f"{status_emoji} –ó–∞–∫–∞–∑ #{tx.order_id}\n"
                f"üë§ User ID: {tx.user_id}\n"
                f"‚≠ê Stars: {tx.stars_amount}\n"
                f"üí∞ –°—É–º–º–∞: {tx.amount_rub}‚ÇΩ\n"
                f"üìÖ –î–∞—Ç–∞: {tx.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {tx.status}\n\n"
            )
            
        await message.answer(report)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ Stars: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

