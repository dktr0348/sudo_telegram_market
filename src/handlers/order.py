from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..database.database import Database
import src.keyboards as kb
from ..database.models import OrderStatus, PaymentMethod, DeliveryMethod
import logging

router = Router()

class OrderState(StatesGroup):
    waiting_for_address = State()
    waiting_for_delivery = State()
    waiting_for_payment = State()
    confirming = State()

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = await db.get_cart(callback.from_user.id)
        if not cart_items:
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return

        await state.set_state(OrderState.waiting_for_address)
        await callback.message.answer(
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–∫–∏:",
            reply_markup=kb.cancel_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await state.update_data(delivery_address=message.text)
    await state.set_state(OrderState.waiting_for_delivery)
    await message.answer(
        "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=kb.delivery_method_keyboard()
    )

@router.callback_query(OrderState.waiting_for_delivery)
async def process_delivery(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_method = callback.data.split('_')[1]
    await state.update_data(delivery_method=delivery_method)
    await state.set_state(OrderState.waiting_for_payment)
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.payment_method_keyboard()
    )

@router.callback_query(OrderState.waiting_for_payment)
async def process_payment(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method = callback.data.split('_')[1]
    data = await state.get_data()
    await state.update_data(payment_method=payment_method)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    cart_items = await db.get_cart(callback.from_user.id)
    total = sum(product.price * quantity for product, quantity in cart_items)
    
    order_details = (
        "üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['delivery_address']}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery_method']}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: {payment_method}\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?"
    )
    
    await state.set_state(OrderState.confirming)
    await callback.message.edit_text(
        order_details,
        reply_markup=kb.confirm_order_keyboard()
    )

@router.callback_query(OrderState.confirming, F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        data = await state.get_data()
        cart_items = await db.get_cart(callback.from_user.id)
        total = sum(product.price * quantity for product, quantity in cart_items)
        
        order = await db.create_order(
            user_id=callback.from_user.id,
            delivery_address=data['delivery_address'],
            delivery_method=data['delivery_method'],
            payment_method=data['payment_method'],
            total_amount=total,
            items=cart_items
        )
        
        if order:
            await db.clear_cart(callback.from_user.id)
            text = (
                f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order.order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.answer(text, reply_markup=kb.main)
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_order_reply(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    await state.clear()
    await message.answer(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.main
    )

@router.callback_query(F.data == "cancel_checkout")
async def cancel_checkout(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.main_inline
    ) 