from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import src.keyboards as kb
from ..database import requests as db
from ..database.database import Database
import logging
import math
from src.config import STARS_CHANNEL_ID, Config
from ..database.models import OrderStatus, PaymentMethod

router = Router()

# –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 Star = –ø—Ä–∏–º–µ—Ä–Ω–æ 0.9-1 —Ä—É–±–ª—å
STARS_RATE = 1.9  # –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
TINKOFF_CARD = "2200701300001085"
TINKOFF_PHONE = "+79810010348"

class PaymentStates(StatesGroup):
    waiting_for_payment = State()
    confirming_payment = State()

@router.callback_query(F.data == "payment_method")
async def choose_payment_method(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
        [
            kb.InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="payment_card"),
            kb.InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data="payment_stars")
        ],
        [kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "payment_card")
async def process_tinkoff_payment(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    try:
        cart_items = await db.get_cart(callback.from_user.id)
        if not cart_items:
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
    
        total_amount = sum(item.price * item.quantity for item in cart_items)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(amount=total_amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_text = (
            f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount}‚ÇΩ\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É:\n"
            f"üí≥ –ù–∞ –∫–∞—Ä—Ç—É: {TINKOFF_CARD}\n"
            f"üì± –ò–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {TINKOFF_PHONE}\n\n"
            f"‚ùóÔ∏è –í–∞–∂–Ω–æ: –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: {callback.from_user.id}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'"
        )
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
                [kb.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment")],
                [kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
            ])
        )
        
        await state.set_state(PaymentStates.waiting_for_payment)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def get_current_stars_rate(db: Database) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        rate = await db.get_stars_rate()
        return rate if rate else 1,9  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –ë–î
    except Exception:
        return 1.9  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

@router.callback_query(F.data == "payment_stars")
async def process_stars_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stars"""
    try:
        cart_items = await db.get_cart(callback.from_user.id)
        if not cart_items:
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_amount = sum(product.price * quantity for product, quantity in cart_items)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Stars
        stars_amount = math.ceil(total_amount / STARS_RATE)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        items_description = "\n".join(
            f"üì¶ {product.name} x {quantity} —à—Ç." 
            for product, quantity in cart_items
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
        await callback.message.answer_invoice(
            title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ Stars",
            description=f"–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n{items_description}",
            payload="stars_payment",
            currency="XTR",  # –í–∞–ª—é—Ç–∞ –¥–ª—è Stars
            prices=[
                LabeledPrice(
                    label="–û–ø–ª–∞—Ç–∞ Stars",
                    amount=stars_amount
                )
            ],
            start_parameter="stars_payment",
            protect_content=True
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        await state.update_data(
            order_details={
                'total_amount': total_amount,
                'stars_amount': stars_amount,
                'payment_method': 'telegram_stars'
            }
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ Stars: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞",
            reply_markup=kb.main_inline
        )

@router.callback_query(F.data == "confirm_payment", PaymentStates.waiting_for_payment)
async def confirm_p2p_payment(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ P2P –æ–ø–ª–∞—Ç—ã"""
    try:
        data = await state.get_data()
        amount = data.get('amount')
        
        order_id = await db.create_order(
            user_id=callback.from_user.id,
            total_amount=amount,
            payment_method="tinkoff_p2p",
            status="pending"
        )
        
        if order_id:
            await callback.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n"
                "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}",
                reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
                    [kb.InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="show_orders")]
                ])
            )
            
            await db.clear_cart(callback.from_user.id)
            
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
                reply_markup=kb.main_inline
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
    finally:
        await state.clear()

@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã"""
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ Stars"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.refund_star_payment(
            message.from_user.id, 
            message.successful_payment.telegram_payment_charge_id
        )
        
        data = await state.get_data()
        order_details = data.get('order_details', {})
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = await db.create_order(
            user_id=message.from_user.id,
            total_amount=order_details['total_amount'],
            payment_method=PaymentMethod.STARS.value,
            status="completed"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = await db.get_cart(message.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ order_items
        for product, quantity in cart_items:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            await db.update_product_quantity(
                product_id=product.product_id,
                quantity=product.quantity - quantity
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ order_items
            await db.add_order_item(
                order_id=order_id,
                product_id=product.product_id,
                quantity=quantity,
                price=product.price
            )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é Stars
        await db.add_stars_transaction(
            order_id=order_id,
            user_id=message.from_user.id,
            stars_amount=order_details['stars_amount'],
            amount_rub=order_details['total_amount'],
            status='completed'
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        stars_to_return = int(order_details['total_amount'])
        
        try:
            await message.bot.send_message(
                message.from_user.id,
                f"‚≠ê –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars_to_return} Stars –∑–∞ –ø–æ–∫—É–ø–∫—É!"
            )
            
            await db.add_stars_transaction(
                order_id=order_id,
                user_id=message.from_user.id,
                stars_amount=stars_to_return,
                amount_rub=order_details['total_amount'],
                status='returned'
            )
        except Exception as stars_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ Stars: {stars_error}")

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await db.clear_cart(message.from_user.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ Stars –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üÜî –ó–∞–∫–∞–∑ #{order_id}\n"
            f"‚≠ê –°–ø–∏—Å–∞–Ω–æ Stars: {order_details['stars_amount']}\n"
            f"‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ Stars: {stars_to_return}\n"
            f"üí∞ –°—É–º–º–∞: {order_details['total_amount']}‚ÇΩ\n\n"
            f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {message.successful_payment.telegram_payment_charge_id}",
            reply_markup=kb.main  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª Stars
        try:
            if hasattr(Config, 'STARS_CHANNEL_ID') and Config.STARS_CHANNEL_ID:
                await message.bot.send_message(
                    Config.STARS_CHANNEL_ID,
                    f"üí´ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Stars\n\n"
                    f"üë§ User ID: {message.from_user.id}\n"
                    f"üÜî –ó–∞–∫–∞–∑ #{order_id}\n"
                    f"‚≠ê Stars: {order_details['stars_amount']}\n"
                    f"üí∞ –°—É–º–º–∞: {order_details['total_amount']}‚ÇΩ\n"
                    f"üîñ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {message.successful_payment.telegram_payment_charge_id}"
                )
        except Exception as channel_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª Stars: {channel_error}")

        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ Stars: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            reply_markup=kb.main  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await state.clear() 
    await callback.message.edit_text(
        "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=kb.main_inline
    ) 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤–≤–µ—Ä—Ö
def convert_to_stars(amount_rub: float) -> int:
    stars = amount_rub / STARS_RATE
    return math.ceil(stars)  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ Stars 

@router.message(Command("stars"))
async def check_stars_balance(message: Message, bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Stars"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await bot.get_chat(STARS_CHANNEL_ID)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å Stars (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ –≤—Å–µ –º–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
        balance_text = (
            f"‚≠ê –ë–∞–ª–∞–Ω—Å Stars –∫–∞–Ω–∞–ª–∞ {channel_info.title}:\n"
            f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {channel_info.stars_balance}\n"
            f"üìä –ö—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: 1 Star = {STARS_RATE}‚ÇΩ"
        )
        
        await message.answer(balance_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ Stars: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ Stars") 