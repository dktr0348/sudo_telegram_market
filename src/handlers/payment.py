from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ..state import Payment
from ..keyboards import main
import logging

router = Router()

PAYMENT_METHODS = {
    'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
    'spb': 'spb',
    'other': 'other',
    'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'
}

async def get_payment_keyboard(order_id: int):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f"pay_card_{order_id}")],
        [InlineKeyboardButton(text="üì± –°–ü–±", callback_data=f"pay_spb_{order_id}")],
        [InlineKeyboardButton(text="üí∞ other", callback_data=f"pay_other_{order_id}")],
        [InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"pay_crypto_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ])
    return keyboard

@router.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def process_checkout(message: Message, state: FSMContext, db):
    user_id = message.from_user.id
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    for name, price, quantity, product_id in cart_items:
        product = await db.get_product_by_id(product_id)
        if not product or product.quantity < quantity:
            await message.answer(f"–¢–æ–≤–∞—Ä '{name}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ")
            return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    total = sum(price * quantity for _, price, quantity, _ in cart_items)
    order_id = await db.create_order(user_id, cart_items, total)
    
    if not order_id:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        return
    
    await state.set_state(Payment.method)
    await state.update_data(order_id=order_id)
    
    text = (
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    keyboard = await get_payment_keyboard(order_id)
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith('pay_'))
async def process_payment(callback: CallbackQuery, state: FSMContext, db):
    try:
        _, method, order_id = callback.data.split('_')
        order = await db.get_order(int(order_id))
        
        if not order:
            await callback.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        payment_info = {
            'card': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–û–ú–ï–† –ö–ê–†–¢–´ –ú–ú/–ì–ì CVC",
            'spb': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä ",
            'other': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä other –∫–æ—à–µ–ª—å–∫–∞",
            'crypto': "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã"
        }
        
        await state.set_state(Payment.processing)
        await state.update_data(payment_method=method, order_id=order_id)
        await callback.message.edit_text(
            f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {PAYMENT_METHODS[method]}\n"
            f"–°—É–º–º–∞: {order.total}‚ÇΩ\n\n"
            f"{payment_info[method]}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main)

@router.message(Payment.processing)
async def process_payment_details(message: Message, state: FSMContext, db):
    data = await state.get_data()
    method = data.get('payment_method')
    order_id = data.get('order_id')
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º —à–ª—é–∑–æ–º
    
    try:
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        order = await db.get_order(order_id)
        if not order:
            await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        cart_items = await db.get_cart(message.from_user.id)
        for name, _, quantity in cart_items:
            await db.update_product_quantity(name, quantity)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await db.clear_cart(message.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await db.update_order_status(order_id, 'paid')
        
        await message.answer(
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {PAYMENT_METHODS[method]}\n"
            f"–°—É–º–º–∞: {order.total}‚ÇΩ",
            reply_markup=main
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞", reply_markup=main)
    
    finally:
        await state.clear() 