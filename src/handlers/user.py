from aiogram import Router, F, Bot
from aiogram.types import (Message, CallbackQuery, ReplyKeyboardRemove,
                            ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup,
                            InlineKeyboardButton)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from ..database.database import Database
from ..database.models import OrderStatus
import src.keyboards as kb
from ..state import Register
from ..database import requests as db
import logging
import re
from typing import Union
from aiogram.fsm.state import State, StatesGroup

router = Router()

# –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–∑—ã–≤–æ–≤
class ProductStates(StatesGroup):
    waiting_for_search = State()
    waiting_for_review = State()
    waiting_for_rating = State()

async def send_with_inline_kb(message: Message, text: str, inline_kb: InlineKeyboardMarkup):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Å–∫—Ä—ã—Ç–∏–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await message.answer(
        text=text,
        reply_markup=inline_kb,
        reply_markup_remove=True
    )

@router.message(CommandStart())
async def cmd_start(message: Message, db: Database):
    if isinstance(message, Message):
        user = message.from_user
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name
        )
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=kb.main)
    else:
        await message.message.delete()
        await message.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=main)

@router.message(F.text.in_({'üõí –ö–æ—Ä–∑–∏–Ω–∞', '–ö–æ—Ä–∑–∏–Ω–∞'}))
@router.callback_query(F.data == "show_cart")
async def show_cart(event: Union[Message, CallbackQuery], db: Database):
    """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = event.from_user.id
        cart_items = await db.get_cart(user_id)
        
        if not cart_items:
            text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
            if isinstance(event, CallbackQuery):
                await event.message.edit_text(text, reply_markup=kb.main)
            else:
                await event.answer(text, reply_markup=kb.main)
            return

        total = 0
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ ÔøΩÔøΩ–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for product, quantity in cart_items:
            item_total = product.price * quantity
            total += item_total
            
            text = (
                f"üì¶ {product.name}\n"
                f"üí∞ {product.price}‚ÇΩ x {quantity} —à—Ç. = {item_total}‚ÇΩ"
            )
            
            if isinstance(event, CallbackQuery):
                message = event.message
            else:
                message = event
                
            if product.photo_id:
                await message.answer_photo(
                    photo=product.photo_id,
                    caption=text,
                    reply_markup=kb.cart_item_keyboard(product.product_id, quantity)
                )
            else:
                await message.answer(
                    text,
                    reply_markup=kb.cart_item_keyboard(product.product_id, quantity)
                )
        
        # –í –∫–æ–Ω—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∏ –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        await message.answer(
            f"üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ",
            reply_markup=kb.cart_summary_keyboard()
        )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã"
        if isinstance(event, CallbackQuery):
            await event.message.edit_text(error_text, reply_markup=kb.main)
        else:
            await event.answer(error_text, reply_markup=kb.main)

@router.message(Command('menu'))
async def cmd_menu(message: Message):
    await message.answer(
        text='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 
        reply_markup=kb.menu_commands
    )

@router.message(Command('catalog'))
async def cmd_catalog(message: Message):
    keyboard = await kb.categories()
    if keyboard:
        await message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=keyboard
        )
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

@router.message(F.text.in_({'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}))
async def back_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer('üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)

@router.message(F.text.in_({'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', '–ö–∞—Ç–∞–ª–æ–≥'}))
async def catalog(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    keyboard = await kb.categories()
    if keyboard:
        await message.answer(
            text='üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

@router.callback_query(F.data.startswith('category_'))
async def show_category_products(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[1])
    keyboard = await kb.category_products(category_id)
    if keyboard:
        await callback.message.edit_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
            reply_markup=keyboard
        )
    else:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")

@router.callback_query(F.data.startswith('product_'))
async def show_product_details(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞"""
    try:
        product_id = int(callback.data.split("_")[1])
        product = await db.get_product_by_id(product_id)
        
        if product:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            is_favorite = await db.is_favorite(callback.from_user.id, product_id)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating = product.average_rating if product.reviews else 0
            rating_stars = "‚≠ê" * round(rating)
            
            text = (
                f"üì¶ {product.name}\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price}‚ÇΩ\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
                f"{rating_stars} –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}\n"
                f"{'‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' if is_favorite else 'ü§ç –ù–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'}"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ù§Ô∏è –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite else "ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                        callback_data=f"toggle_favorite_{product_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üõí –í –∫–æ—Ä–∑–∏–Ω—É",
                        callback_data=f"add_to_cart_{product_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="back_to_catalog"
                    )
                ]
            ])
            
            if product.photo_id:
                await callback.message.edit_caption(
                    caption=text,
                    reply_markup=keyboard
                )
            else:
                await callback.message.edit_text(
                    text,
                    reply_markup=keyboard
                )
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞")

@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    keyboard = await kb.    categories()
    if keyboard:
        await callback.message.edit_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=keyboard
        )
    else:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@router.message(F.text.in_({'üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}))
async def start_registration(message: Message, state: FSMContext, db: Database):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if await db.is_user_registered(message.from_user.id):
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    await state.set_state(Register.name)
    await message.answer('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.message(Register.name)
async def reg_contact(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.contact)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup=kb.send_contact)

@router.message(Register.contact, F.contact)
async def reg_location(message: Message, state: FSMContext):
    await state.update_data(contact=message.contact.phone_number)
    await state.set_state(Register.location)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥',
                        reply_markup=kb.skip_location)

@router.message(Register.location, F.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_location(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    await state.update_data(location=[None, None])
    await state.set_state(Register.email)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ e-mail', reply_markup=ReplyKeyboardRemove())

@router.message(Register.location, F.location)
async def reg_email(message: Message, state: FSMContext):
    await state.update_data(location=[message.location.latitude,
                            message.location.longitude])
    await state.set_state(Register.email)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ e-mail', reply_markup=ReplyKeyboardRemove())

@router.message(Register.email)
async def reg_age(message: Message, state: FSMContext):
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(email_pattern, message.text):
        await state.update_data(email=message.text)
        await state.set_state(Register.age)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail –∞–¥—Ä–µ—Å.')

@router.message(Register.age)
async def reg_photo(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(age=message.text)
        await state.set_state(Register.photo)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')

@router.message(Register.photo, F.photo)
async def confirm_registration(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()
    
    confirm_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['contact']}\n"
        f"Email: {data['email']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        "–õ–æ–∫–∞—Ü–∏—è –∏ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    
    await state.set_state(Register.confirm)
    await message.answer(confirm_text, reply_markup=confirm_kb)

@router.message(Register.photo)
async def reg_no_photo(message: Message):
    await message.answer('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ')

@router.message(F.text.in_({'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}))
async def authorization(message: Message, db: Database):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await db.is_user_registered(message.from_user.id):
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", 
            reply_markup=kb.main
        )

@router.message(Command("cancel"))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_registration(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=kb.main
    )

@router.message(Register.confirm)
async def process_confirm(message: Message, state: FSMContext, db: Database):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        try:
            if await db.register_user(
                user_id=message.from_user.id,
                name=data['name'],
                phone=data['contact'],
                email=data['email'],
                location_lat=data['location'][0],
                location_lon=data['location'][1],
                age=int(data['age']),
                photo_id=data['photo']
            ):
                await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', reply_markup=kb.main)
            else:
                await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        finally:
            await state.clear()
    elif message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=kb.main
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã")

@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    if await db.is_user_registered(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.callback_query(F.data == 'back')
async def back_to_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kb.main
    )

@router.message(Command("profile"))
async def cmd_profile(message: Message, db: Database):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        user_data = await db.get_user_profile(message.from_user.id)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: {user_data}")
        
        if not user_data:
            await message.answer(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=kb.main
            )
            return

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        (user_id, name, phone, email, lat, lon, 
         age, photo_id, reg_date, username) = user_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date_formatted = reg_date.split('.')[0] if reg_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"–ò–º—è: {name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìß Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age or '–ù–µ —É–∫–∞ÔøΩÔøΩ–∞–Ω'}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {'–£–∫–∞–∑–∞–Ω–∞' if lat and lon else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date_formatted}\n"
            f"üÜî Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if photo_id:
            try:
                await message.answer_photo(
                    photo=photo_id,
                    caption=profile_text,
                    parse_mode="HTML",
                    reply_markup=kb.profile_keyboard
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
                await message.answer(
                    profile_text,
                    parse_mode="HTML",
                    reply_markup=kb.profile_keyboard
                )
        else:
            await message.answer(
                profile_text,
                parse_mode="HTML",
                reply_markup=kb.profile_keyboard
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—àÔøΩÔøΩ–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kb.main
        )

@router.callback_query(F.data.startswith('add_to_cart_'))
async def add_to_cart(callback: CallbackQuery, db: Database):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split('_')[3])
    quantity = int(callback.message.reply_markup.inline_keyboard[0][1].text.split()[0])
    
    if await db.add_to_cart(callback.from_user.id, product_id, quantity):
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        await callback.message.edit_reply_markup(
            reply_markup=kb.product_actions(product_id, quantity)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")

@router.callback_query(F.data.startswith('qty_minus_'))
async def decrease_quantity(callback: CallbackQuery, db: Database):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split('_')[2])
    current_qty = int(callback.message.reply_markup.inline_keyboard[0][1].text)
    
    if current_qty > 1:
        new_qty = current_qty - 1
        await update_quantity_keyboard(callback.message, product_id, new_qty)

@router.callback_query(F.data.startswith('qty_plus_'))
async def increase_quantity(callback: CallbackQuery, db: Database):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split('_')[2])
    current_qty = int(callback.message.reply_markup.inline_keyboard[0][1].text)
    new_qty = current_qty + 1
    await update_quantity_keyboard(callback.message, product_id, new_qty)

async def update_quantity_keyboard(message: Message, product_id: int, new_qty: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"qty_minus_{product_id}"),
            InlineKeyboardButton(text=str(new_qty), callback_data="current_qty"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"qty_plus_{product_id}")
        ],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_cart_{product_id}")]
    ])
    await message.edit_reply_markup(reply_markup=keyboard)

@router.callback_query(F.data.startswith('confirm_cart_'))
async def confirm_add_to_cart(callback: CallbackQuery, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split('_')[2])
    quantity = int(callback.message.reply_markup.inline_keyboard[0][1].text)
    user_id = callback.from_user.id
    
    if await db.add_to_cart(user_id, product_id, quantity):
        await callback.message.edit_text(
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})"
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É")

@router.message(F.text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
async def clear_cart(message: Message, db: Database):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    if await db.clear_cart(message.from_user.id):
        await message.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=kb.main)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

@router.message(F.text == 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def checkout(message: Message, db: Database):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    cart_items = await db.get_cart(message.from_user.id)
    if not cart_items:
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    total = sum(price * quantity for _, price, quantity in cart_items)
    order_text = "üìã –í–∞—à –∑–∞–∫–∞–∑:\n\n"
    for name, price, quantity in cart_items:
        order_text += f"üì¶ {name} x{quantity} = {price * quantity}‚ÇΩ\n"
    order_text += f"\nüí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_order")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
    ])
    
    await message.answer(order_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("increase_"))
async def increase_product_quantity(callback: CallbackQuery, db: Database):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split("_")[1])
    product = await db.get_product_by_id(product_id)
    current_quantity = int(callback.message.reply_markup.inline_keyboard[0][1].text.split()[0])
    
    if product and current_quantity < product.quantity:
        new_quantity = current_quantity + 1
        await callback.message.edit_reply_markup(
            reply_markup=kb.product_actions(product_id, new_quantity)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_product_quantity(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split("_")[1])
    current_quantity = int(callback.message.reply_markup.inline_keyboard[0][1].text.split()[0])
    
    if current_quantity > 1:
        new_quantity = current_quantity - 1
        await callback.message.edit_reply_markup(
            reply_markup=kb.product_actions(product_id, new_quantity)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("remove_from_cart_"))
async def remove_from_cart(callback: CallbackQuery, db: Database):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
        product_id = int(callback.data.split("_")[-1])
        
        if await db.remove_from_cart(callback.from_user.id, product_id):
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
            await callback.message.delete()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_items = await db.get_cart(callback.from_user.id)
            if cart_items:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
                total = sum(product.price * quantity for product, quantity in cart_items)
                await callback.message.answer(
                    f"üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ",
                    reply_markup=kb.cart_summary_keyboard()
                )
            else:
                await callback.message.answer(
                    "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                    reply_markup=kb.main
                )
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback: CallbackQuery, db: Database):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ callback"""
    try:
        if await db.clear_cart(callback.from_user.id):
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
                reply_markup=kb.main
            )
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π
            try:
                await callback.message.delete()
            except:
                pass
            await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("cart_increase_"))
async def cart_increase_quantity(callback: CallbackQuery, db: Database):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        product_id = int(callback.data.split("_")[2])
        current_quantity = await db.get_cart_item_quantity(callback.from_user.id, product_id)
        product = await db.get_product_by_id(product_id)
        
        if product and current_quantity < product.quantity:
            new_quantity = current_quantity + 1
            if await db.add_to_cart(callback.from_user.id, product_id, new_quantity):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π —Å—É–º–º–æ–π
                item_total = product.price * new_quantity
                text = (
                    f"üì¶ {product.name}\n"
                    f"üí∞ {product.price}‚ÇΩ x {new_quantity} —à—Ç. = {item_total}‚ÇΩ"
                )
                
                if product.photo_id:
                    await callback.message.edit_caption(
                        caption=text,
                        reply_markup=kb.cart_item_keyboard(product_id, new_quantity)
                    )
                else:
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=kb.cart_item_keyboard(product_id, new_quantity)
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
                await update_cart_total(callback.message, callback.from_user.id, db)
                await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        else:
            await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("cart_decrease_"))
async def cart_decrease_quantity(callback: CallbackQuery, db: Database):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        product_id = int(callback.data.split("_")[2])
        current_quantity = await db.get_cart_item_quantity(callback.from_user.id, product_id)
        product = await db.get_product_by_id(product_id)
        
        if current_quantity > 1:
            new_quantity = current_quantity - 1
            if await db.add_to_cart(callback.from_user.id, product_id, new_quantity):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π —Å—É–º–º–æ–π
                item_total = product.price * new_quantity
                text = (
                    f"üì¶ {product.name}\n"
                    f"üí∞ {product.price}‚ÇΩ x {new_quantity} —à—Ç. = {item_total}‚ÇΩ"
                )
                
                if product.photo_id:
                    await callback.message.edit_caption(
                        caption=text,
                        reply_markup=kb.cart_item_keyboard(product_id, new_quantity)
                    )
                else:
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=kb.cart_item_keyboard(product_id, new_quantity)
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
                await update_cart_total(callback.message, callback.from_user.id, db)
                await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        else:
            await callback.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message, db: Database):
    """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        cart_items = await db.get_cart(message.from_user.id)
        if not cart_items:
            await message.answer(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=kb.main
            )
            return

        total = 0
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for product, quantity in cart_items:
            item_total = product.price * quantity
            total += item_total
            
            text = (
                f"üì¶ {product.name}\n"
                f"üí∞ {product.price}‚ÇΩ x {quantity} —à—Ç. = {item_total}‚ÇΩ"
            )
            
            if product.photo_id:
                await message.answer_photo(
                    photo=product.photo_id,
                    caption=text,
                    reply_markup=kb.cart_item_keyboard(product.product_id, quantity)
                )
            else:
                await message.answer(
                    text,
                    reply_markup=kb.cart_item_keyboard(product.product_id, quantity)
                )
        
        # –í –∫–æ–Ω—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∏ –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        await message.answer(
            f"üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ",
            reply_markup=kb.cart_summary_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã",
            reply_markup=kb.main
        )

async def update_cart_total(message: Message, user_id: int, db: Database):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        cart_items = await db.get_cart(user_id)
        if cart_items:
            total = sum(product.price * quantity for product, quantity in cart_items)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º–æ–π
            await message.answer(
                f"üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ",
                reply_markup=kb.cart_summary_keyboard()
            )
        else:
            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            await message.answer(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=kb.main
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã: {e}")

@router.callback_query(F.data == "show_orders")
async def show_orders_callback(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        orders = await db.get_user_orders(callback.from_user.id)
        if not orders:
            await callback.message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=kb.main
            )
            await callback.message.delete()
            return

        text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for order in orders:
            text += (
                f"–ó–∞–∫–∞–∑ ‚Ññ{order.order_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
                f"–°—É–º–º–∞: {order.total_amount}‚ÇΩ\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                "-------------------\n"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.order_id}",
                    callback_data=f"order_details_{order.order_id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
        ])

        await callback.message.answer(text, reply_markup=keyboard)
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders_command(message: Message, db: Database):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    try:
        orders = await db.get_user_orders(message.from_user.id)
        if not orders:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=kb.main
            )
            return

        text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            text += (
                f"–ó–∞–∫–∞–∑ ‚Ññ{order.order_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
                f"–°—É–º–º–∞: {order.total_amount}‚ÇΩ\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                "-------------------\n"
            )

        await message.answer(text, reply_markup=kb.main)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")

@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def start_search(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    await state.set_state(ProductStates.waiting_for_search)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")]],
            resize_keyboard=True
        )
    )

@router.message(ProductStates.waiting_for_search)
async def process_search(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
        await state.clear()
        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=kb.main)
        return

    products = await db.search_products(message.text)
    if not products:
        await message.answer(
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=kb.main
        )
        await state.clear()
        return

    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for product in products:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{product.name} - {product.price}‚ÇΩ",
                callback_data=f"product_{product.product_id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_catalog")
    ])
    
    await message.answer(text, reply_markup=keyboard)
    await state.clear()

@router.callback_query(F.data == "filter_products")
async def show_filters(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –ü–æ —Ü–µ–Ω–µ ‚¨ÜÔ∏è", callback_data="sort_price_asc"),
            InlineKeyboardButton(text="üí∞ –ü–æ —Ü–µ–Ω–µ ‚¨áÔ∏è", callback_data="sort_price_desc")
        ],
        [
            InlineKeyboardButton(text="‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data="sort_rating"),
            InlineKeyboardButton(text="üî§ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="sort_name")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_catalog")]
    ])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("sort_"))
async def sort_products(callback: CallbackQuery, db: Database):
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    sort_type = callback.data.split('_')[1]
    sort_order = callback.data.split('_')[2] if len(callback.data.split('_')) > 2 else 'asc'
    
    products = await db.get_products_filtered(sort_by=sort_type, sort_order=sort_order)
    if not products:
        await callback.answer("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for product in products:
        rating_stars = "‚≠ê" * round(product.average_rating)
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{product.name} - {product.price}‚ÇΩ {rating_stars}",
                callback_data=f"product_{product.product_id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="filter_products")
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_catalog")
    ])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "show_favorites")
async def show_favorites(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        favorites = await db.get_user_favorites(callback.from_user.id)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n" if favorites else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        if favorites:
            for favorite in favorites:
                product = favorite.product
                rating_stars = "‚≠ê" * round(product.average_rating)
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"{product.name} - {product.price}‚ÇΩ {rating_stars}",
                        callback_data=f"product_{product.product_id}"
                    )
                ])
        
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(text, reply_markup=keyboard)
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

@router.callback_query(F.data.startswith("toggle_favorite_"))
async def toggle_favorite(callback: CallbackQuery, db: Database):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        product_id = int(callback.data.split("_")[2])
        result = await db.toggle_favorite(callback.from_user.id, product_id)
        
        if result:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            is_favorite = await db.is_favorite(callback.from_user.id, product_id)
            await callback.answer(
                "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if is_favorite else "‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            await show_product_details(callback, db)
        else:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile_command(message: Message, db: Database):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    await cmd_profile(message, db)

@router.callback_query(F.data.startswith("order_details_"))
async def show_order_details(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = await db.get_order_by_id(order_id)
        
        if order:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
            items = await db.get_order_items(order_id)
            
            text = (
                f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order.order_id}\n"
                f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {order.status.value}\n"
                f"üí∞ –°—É–º–º–∞: {order.total_amount}‚ÇΩ\n"
                f"üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_method.value}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.payment_method.value}\n\n"
                "üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            )
            
            for item in items:
                text += f"‚Ä¢ {item.product.name} x {item.quantity} —à—Ç. = {item.price * item.quantity}‚ÇΩ\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="show_orders")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, db: Database):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    try:
        profile = await db.get_user_profile(callback.from_user.id)
        if profile:
            user_id, name, phone, email, lat, lon, age, photo_id, reg_date, username = profile
            
            text = (
                f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
                f"–ò–º—è: {name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"Email: {email}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
                f"Username: @{username}"
            )
            
            await callback.message.edit_text(text, reply_markup=kb.profile_keyboard)
        else:
            await callback.message.edit_text(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                reply_markup=kb.main_inline
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
