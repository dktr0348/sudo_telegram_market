from aiogram import Router, F, Bot
from aiogram.types import (Message, CallbackQuery, ReplyKeyboardRemove,
                            ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup,
                            InlineKeyboardButton)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from ..database.database import Database
from ..keyboards import (main, cart_keyboard, main_command, menu_commands,
                                 send_contact, send_location, categories,
                                 category_products, profile_keyboard)
from ..state import Register
from ..database import requests as db
import logging
import re

router = Router()

async def send_with_inline_kb(message: Message, text: str, inline_kb: InlineKeyboardMarkup):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Å–∫—Ä—ã—Ç–∏–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await message.answer(
        text=text,
        reply_markup=inline_kb,
        reply_markup_remove=True
    )

@router.message(CommandStart())
async def cmd_start(message: Message, db: Database):
    if isinstance(message, Message):
        user = message.from_user
        await db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name
        )
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=main)
    else:
        await message.message.delete()
        await message.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=main)

@router.message(F.text.in_({'üõí –ö–æ—Ä–∑–∏–Ω–∞', '–ö–æ—Ä–∑–∏–Ω–∞'}))
async def show_cart(message: Message, db: Database):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cart_items = await db.get_cart(message.from_user.id)
    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    for name, price, quantity in cart_items:
        subtotal = price * quantity
        total += subtotal
        cart_text += f"üì¶ {name} x{quantity} = {subtotal}‚ÇΩ\n"
    cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    await message.answer(cart_text, reply_markup=cart_keyboard)

@router.message(Command('menu'))
async def cmd_menu(message: Message):
    await message.answer(
        text='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 
        reply_markup=menu_commands
    )

@router.message(Command('catalog'))
async def cmd_catalog(message: Message):
    keyboard = await categories()
    if keyboard:
        await message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=keyboard
        )
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

@router.message(F.text.in_({'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}))
async def back_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer('üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main)

@router.message(F.text.in_({'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', '–ö–∞—Ç–∞–ª–æ–≥'}))
async def catalog(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    keyboard = await categories()
    if keyboard:
        await message.answer(
            text='üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

@router.callback_query(F.data.startswith('category_'))
async def show_category_products(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[1])
    keyboard = await category_products(category_id)
    if keyboard:
        await callback.message.edit_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
            reply_markup=keyboard
        )
    else:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")

@router.callback_query(F.data.startswith('product_'))
async def show_product_details(callback: CallbackQuery):
    product_id = int(callback.data.split('_')[1])
    product = await db.get_product_by_id(product_id)
    
    if product:
        text = (
            f"üì¶ <b>{product.name}</b>\n\n"
            f"üìù {product.description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price}‚ÇΩ"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", 
                    callback_data=f"add_to_cart_{product_id}")],
                [InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", 
                    callback_data="back_to_categories")]
            ]
        )
        
        if product.photo_id:
            await callback.message.answer_photo(
                photo=product.photo_id,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    else:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    keyboard = await categories()
    if keyboard:
        await callback.message.edit_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=keyboard
        )
    else:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@router.message(F.text.in_({'üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}))
async def start_registration(message: Message, state: FSMContext, db: Database):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if await db.is_user_registered(message.from_user.id):
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    await state.set_state(Register.name)
    await message.answer('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.message(Register.name)
async def reg_contact(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.contact)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup=send_contact)

@router.message(Register.contact, F.contact)
async def reg_location(message: Message, state: FSMContext):
    await state.update_data(contact=message.contact.phone_number)
    await state.set_state(Register.location)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é',
                        reply_markup=send_location,
                        protect_content=True)

@router.message(Register.location, F.location)
async def reg_email(message: Message, state: FSMContext):
    await state.update_data(location=[message.location.latitude,
                            message.location.longitude])
    await state.set_state(Register.email)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ e-mail', reply_markup=ReplyKeyboardRemove())

@router.message(Register.email)
async def reg_age(message: Message, state: FSMContext):
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(email_pattern, message.text):
        await state.update_data(email=message.text)
        await state.set_state(Register.age)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail –∞–¥—Ä–µ—Å.')

@router.message(Register.age)
async def reg_photo(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(age=message.text)
        await state.set_state(Register.photo)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')

@router.message(Register.photo, F.photo)
async def confirm_registration(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()
    
    confirm_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['contact']}\n"
        f"Email: {data['email']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        "–õ–æ–∫–∞—Ü–∏—è –∏ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    
    await state.set_state(Register.confirm)
    await message.answer(confirm_text, reply_markup=confirm_kb)

@router.message(Register.photo)
async def reg_no_photo(message: Message):
    await message.answer('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ')

@router.message(F.text.in_({'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}))
async def authorization(message: Message, db: Database):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await db.is_user_registered(message.from_user.id):
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", 
            reply_markup=main
        )

@router.message(Command("cancel"))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_registration(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=main
    )

@router.message(Register.confirm)
async def process_confirm(message: Message, state: FSMContext, db: Database):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        try:
            if await db.register_user(
                user_id=message.from_user.id,
                name=data['name'],
                phone=data['contact'],
                email=data['email'],
                location_lat=data['location'][0],
                location_lon=data['location'][1],
                age=int(data['age']),
                photo_id=data['photo']
            ):
                await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', reply_markup=main)
            else:
                await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        finally:
            await state.clear()
    elif message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã")

@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    if await db.is_user_registered(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.callback_query(F.data == 'back')
async def back_to_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=main
    )

@router.message(Command("profile"))
async def cmd_profile(message: Message, db: Database):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        user_data = await db.get_user_profile(message.from_user.id)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: {user_data}")
        
        if not user_data:
            await message.answer(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=main
            )
            return

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        (user_id, name, phone, email, lat, lon, 
         age, photo_id, reg_date, username) = user_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date_formatted = reg_date.split('.')[0] if reg_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üìù –ò–º—è: {name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìß Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {'–£–∫–∞–∑–∞–Ω–∞' if lat and lon else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date_formatted}\n"
            f"üÜî Username: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if photo_id:
            try:
                await message.answer_photo(
                    photo=photo_id,
                    caption=profile_text,
                    parse_mode="HTML",
                    reply_markup=profile_keyboard
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
                await message.answer(
                    profile_text,
                    parse_mode="HTML",
                    reply_markup=profile_keyboard
                )
        else:
            await message.answer(
                profile_text,
                parse_mode="HTML",
                reply_markup=profile_keyboard
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main
        )
