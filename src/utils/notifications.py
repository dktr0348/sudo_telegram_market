from aiogram import Bot
from ..database import requests as db
import logging
from typing import List, Optional

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def send_notification(self, user_id: int, text: str, disable_notification: bool = False) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if await db.get_user_notifications(user_id):
                await self.bot.send_message(
                    user_id, 
                    text, 
                    disable_notification=disable_notification
                )
                return True
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    async def notify_order_status(self, order_id: int, new_status: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            order = await db.get_order(order_id)
            if order:
                text = f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
                text += f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}"
                await self.send_notification(order.user_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞: {e}")

    async def notify_new_product(self, product_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ"""
        try:
            product = await db.get_product_by_id(product_id)
            if product:
                text = f"üÜï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ!\n\n"
                text += f"üìù {product.name}\n"
                text += f"üí∞ –¶–µ–Ω–∞: {product.price}‚ÇΩ"
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                users = await db.get_users_with_notifications()
                for user in users:
                    await self.send_notification(user.user_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ: {e}")

    async def notify_payment_status(self, order_id: int, status: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã"""
        try:
            order = await db.get_order(order_id)
            if order:
                text = f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}\n"
                text += f"–°—Ç–∞—Ç—É—Å: {status}"
                await self.send_notification(order.user_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

    async def notify_review_response(self, review_id: int, response: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤"""
        try:
            review = await db.get_review(review_id)
            if review:
                text = f"üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤:\n\n"
                text += f"–í–∞—à –æ—Ç–∑—ã–≤: {review.text}\n"
                text += f"–û—Ç–≤–µ—Ç: {response}"
                await self.send_notification(review.user_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤: {e}")